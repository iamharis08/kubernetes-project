# This manifest defines all necessary components (Deployments, Services, and Ingress)
# for the secure, multi-tier microservices architecture.
# All applications are configured to utilize Workload Identity (via serviceAccountName)
# and are intended to run within an Istio service mesh.

# -----------------------------------------------
# --- 1. Audit Service ---
# The Audit Service is a backend component responsible for securely logging
# all sensitive operations. It is accessed only internally by the PHI Service.
# -----------------------------------------------

# === DEPLOYMENT: Audit Service ===
apiVersion: apps/v1
kind: Deployment
metadata:
  name: audit-service
spec:
  # Maintain a single replica for logging stability.
  replicas: 1
  selector:
    matchLabels:
      app: audit-service
  template:
    metadata:
      labels:
        app: audit-service
    spec:
      # Links the pod to the Kubernetes Service Account (KSA) for Workload Identity.
      serviceAccountName: audit-service-sa
      containers:
      - name: audit-container
        # Image URL specific to the GCP Artifact Registry path.
        image: us-east1-docker.pkg.dev/elevance-demo-project/my-apps/audit-service:v3 
        ports:
        - containerPort: 8080
        env:
        # Excludes Istio's sidecar metrics port from interception to prevent conflicts.
        - name: ISTIO_INBOUND_PORTS_EXCLUDE
          value: "15020"
        resources:
          # Define resource requests to ensure Guaranteed Quality of Service (QoS).
          requests:
            cpu: "100m"
            memory: "128Mi"
        readinessProbe:
          # Simple liveness check to confirm the service is responsive on root path.
          httpGet:
            path: / 
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10

---
# === SERVICE: Audit Service ===
apiVersion: v1
kind: Service
metadata:
  name: audit-service
spec:
  # Internal service discovery only.
  type: ClusterIP
  selector:
    app: audit-service
  ports:
  - name: http-audit
    port: 80
    targetPort: 8080
    protocol: TCP

---
# -----------------------------------------------
# --- 2. PHI Service ---
# The PHI Service handles protected health information. It requires strict
# access controls (Workload Identity) and must successfully call the Audit Service
# before serving any PHI data.
# -----------------------------------------------

# === DEPLOYMENT: PHI Service ===
apiVersion: apps/v1
kind: Deployment
metadata:
  name: phi-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: phi-service
  template:
    metadata:
      labels:
        app: phi-service 
    spec:
      # Links the pod to the KSA for Workload Identity Federation.
      serviceAccountName: phi-service-sa
      containers:
      - name: phi-container
        image: us-east1-docker.pkg.dev/elevance-demo-project/my-apps/phi-service:v2 
        ports:
        - containerPort: 8080 
        env:
        # Internal configuration for connecting to the Audit Service.
        - name: AUDIT_SERVICE_URL
          value: "http://audit-service/log"
        # Excludes Istio's sidecar metrics port from interception.
        - name: ISTIO_INBOUND_PORTS_EXCLUDE
          value: "15020"
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
        readinessProbe:
          httpGet:
            path: / 
            port: 8080
          # Aggressive readiness checks for critical PHI service.
          initialDelaySeconds: 15 
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 5

---
# === SERVICE: PHI Service ===
apiVersion: v1
kind: Service
metadata:
  name: phi-service
spec:
  type: ClusterIP
  selector:
    app: phi-service
  ports:
  - name: http-service
    port: 80
    targetPort: 8080
    protocol: TCP
  
---
# -----------------------------------------------
# --- 3. API Gateway Service ---
# This serves as the single ingress point for all application API calls.
# It handles request routing and orchestrates calls to the PHI Service.
# -----------------------------------------------

# === DEPLOYMENT: API Gateway Service ===
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      # Links the pod to the KSA for Workload Identity.
      serviceAccountName: api-gateway-sa
      containers:
      - name: api-gateway-container
        image: us-east1-docker.pkg.dev/elevance-demo-project/my-apps/api-gateway:v9
        ports:
        - containerPort: 8080
        env:
        # Internal configuration for connecting to the PHI Service.
        - name: PHI_SERVICE_URL
          value: "http://phi-service"
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10

---
# === SERVICE: API Gateway Service ===
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
spec:
  type: ClusterIP
  selector:
    app: api-gateway
  ports:
    - name: http-api 
      port: 80
      targetPort: 8080
      protocol: TCP

---
# -----------------------------------------------
# --- 4. Frontend Service ---
# The web application client serving the static/SPA assets.
# -----------------------------------------------

# === DEPLOYMENT: Frontend Service ===
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      # Links the pod to the KSA for Workload Identity (if it needs to access GCP resources).
      serviceAccountName: frontend-sa
      containers:
      - name: frontend-container
        image: us-east1-docker.pkg.dev/elevance-demo-project/my-apps/frontend:v12
        # Always pull the latest version to ensure client side updates.
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10

---
# === SERVICE: Frontend Service ===
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  type: ClusterIP
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP

---
# -----------------------------------------------
# --- 5. Ingress (Public Access) ---
# Defines the Google Cloud Load Balancer (GCLB) configuration for external traffic.
# This is the single public entry point for the entire application.
# -----------------------------------------------

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: phi-ingress
  annotations:
    # Explicitly sets the Ingress controller to use the GCE Load Balancer.
    kubernetes.io/ingress.class: "gce" 
spec:
  # Directs all unmatched traffic (e.g., the root path '/') to the frontend.
  defaultBackend:
    service:
      name: frontend
      port:
        number: 80
  rules:
  - http:
      paths:
      # Path rule for all API traffic, routing it directly to the API Gateway.
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: api-gateway
            port:
              number: 80
      # Path rule for the root web application, routing it to the frontend service.
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 80
